def mvnProfile    = 'unknown'
def dockerVersion = 'unknown'
def gitBranch     = 'unknown'

pipeline {
// Initially run on any agent
   agent any
   environment {
//Configure Maven from the maven tooling in Jenkins
      def mvnHome = tool 'Default'
      PATH = "${mvnHome}/bin:${env.PATH}"
      
//Set some defaults
      def workspace = pwd()
      def mvnGoal    = 'deploy'
      def dockerRepository = 'cicsts-docker-local.artifactory.swg-devops.com'
   }
   stages {
// Build all the platform indenpendent manifests, including latest versions if required
// Built in parallel because the awful manifest push is so very very slow
      stage('docker-manifests') {
         parallel {
            stage('manifest-boot-embedded') {
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-boot-embedded-${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-boot-embedded-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-boot-embedded:${dockerVersion} ${dockerRepository}/voras-boot-embedded-amd64:${dockerVersion} ${dockerRepository}/voras-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-boot-embedded:${dockerVersion}"
               }
            }

            stage('manifest-boot-embedded-latest') {
               when {
                  environment name: 'GIT_BRANCH', value: 'origin/master'
               }
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-boot-embedded-latest"
                  sh "docker pull ${dockerRepository}/voras-boot-embedded-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-boot-embedded:latest ${dockerRepository}/voras-boot-embedded-amd64:${dockerVersion} ${dockerRepository}/voras-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-boot-embedded:latest"
               }
            }

            stage('manifest-ras-couchdb-init') {
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-ras-couchdb-init-${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-ras-couchdb-init-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-ras-couchdb-init-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-ras-couchdb-init:${dockerVersion} ${dockerRepository}/voras-ras-couchdb-init-amd64:${dockerVersion} ${dockerRepository}/voras-ras-couchdb-init-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-ras-couchdb-init:${dockerVersion}"
               }
            }

            stage('manifest-ras-couchdb-init-latest') {
               when {
                  environment name: 'GIT_BRANCH', value: 'origin/master'
               }
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-ras-couchdb-init-latest"
                  sh "docker pull ${dockerRepository}/voras-ras-couchdb-init-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-ras-couchdb-init-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-ras-couchdb-init:latest ${dockerRepository}/voras-ras-couchdb-init-amd64:${dockerVersion} ${dockerRepository}/voras-ras-couchdb-init-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-ras-couchdb-init:latest"
               }
            }

            stage('manifest-resources') {
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-resources-${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-resources-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-resources-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-resources:${dockerVersion} ${dockerRepository}/voras-resources-amd64:${dockerVersion} ${dockerRepository}/voras-resources-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-resources:${dockerVersion}"
               }
            }

            stage('manifest-resources-latest') {
               when {
                  environment name: 'GIT_BRANCH', value: 'origin/master'
               }
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-resources-latest"
                  sh "docker pull ${dockerRepository}/voras-resources-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-resources-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-resources:latest ${dockerRepository}/voras-resources-amd64:${dockerVersion} ${dockerRepository}/voras-resources-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-resources:latest"
               }
            }

            stage('manifest-ibm-boot') {
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-ibm-boot-embedded-${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-ibm-boot-embedded-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-ibm-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-ibm-boot-embedded:${dockerVersion} ${dockerRepository}/voras-ibm-boot-embedded-amd64:${dockerVersion} ${dockerRepository}/voras-ibm-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-ibm-boot-embedded:${dockerVersion}"
               }
            }

            stage('manifest-ibm-boot-latest') {
               when {
                  environment name: 'GIT_BRANCH', value: 'origin/master'
               }
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "rm -rf ~/.docker/manifests/${dockerRepository}_voras-ibm-boot-embedded-latest"
                  sh "docker pull ${dockerRepository}/voras-ibm-boot-embedded-amd64:${dockerVersion}"
                  sh "docker pull ${dockerRepository}/voras-ibm-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest create ${dockerRepository}/voras-ibm-boot-embedded:latest ${dockerRepository}/voras-ibm-boot-embedded-amd64:${dockerVersion} ${dockerRepository}/voras-ibm-boot-embedded-s390x:${dockerVersion}"
                  sh "docker manifest push ${dockerRepository}/voras-ibm-boot-embedded:latest"
               }
            }

            stage('manifest-api-bootstrap-latest') {
               when {
                  environment name: 'GIT_BRANCH', value: 'origin/master'
               }
               agent { 
                  label 'docker-amd64'
               }
               steps {
                  sh "docker pull ${dockerRepository}/voras-api-bootstrap-amd64:${dockerVersion}"
                  sh "docker tag ${dockerRepository}/voras-api-bootstrap-amd64:${dockerVersion}  ${dockerRepository}/voras-api-bootstrap-amd64:latest"
                  sh "docker push ${dockerRepository}/voras-api-bootstrap-amd64:latest"
               }
            }
         }
      }
   }
}